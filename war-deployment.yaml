---
# This playbook used for deploying Mobikwik war generated by Jenkins. 

- hosts: Local
  vars:
    project_name: '{{branch}}'
    war_name: '{{war}}'
  tasks:

      - name: Variable Validation
        fail: msg=" Kindly pass war name as a command line argument."
        when: war is undefined

      - name: Variable Validation
        fail: msg=" Kindly pass branch name as a command line argument."
        when: branch is undefined
      
#      - name: Deleting The Old War Files
#        shell: 'rm -rf *.war'
#        args:
#          chdir: /var/tmp/mobikwik_war/
#        become: true

      - name: Is War exist or not
        stat: path=/var/tmp/mobikwik_war/{{war_name}}
        register: is_exist
        become: true

      # - name: Downlaod Mobikwik war
      #   shell: wget --tries=75 -c --auth-no-challenge --http-user=prodjenkins --http-password=prodjenkins http://10.10.26.87:8080/job/{{project_name}}/ws/{{war_name}};
      #   shell: wget --tries=75 -c --auth-no-challenge --http-user=admin --http-password=mobikwik http://10.10.26.82:8080/job/{{project_name}}/ws/{{war_name}};        
      #   args:
      #     chdir: /var/tmp/mobikwik_war/
      #   when: is_exist.stat.exists == False
      #   become: true

      # - name: Change OwnerShip To Kwikonnect
      #   file : path=/var/tmp/mobikwik_war state=directory recurse=yes owner=kwikonnect group=sysops mode=755
      #   become: true

- hosts: '{{target}}'
  vars:
    project_name: '{{branch}}'
    war_name: '{{war}}'
    soft_link: mobikwik
    tomcat: '{{tomcat_name}}'
    install_dir: mobikwik
    port: 8080
    hit_url: '{{url}}'
    app_id: '{{appid}}'
    local_path: '{{local_path}}'
    work_dir: '{{work_dir}}'
    remote_path: '/var/install/{{install_dir}}/{{war}}'

  tasks:
      - name: Variable Validation
        fail: msg=" Kindly Pass tomcat name as a command line arguemnt."
        when: tomcat_name is undefined

      - name: Variable Validation
        fail: msg=" Kindly pass war name as a command line argument."
        when: war is undefined

      - name: Variable Validation
        fail: msg=" Kindly pass branch name as a command line argument."
        when: branch is undefined

      - name: Is War exist or not
        stat: 
          path: '{{remote_path}}'
        register: is_exist
        become: yes


      # - name: Is War exist or not 
      #   stat: path=/var/install/{{install_dir}}/{{war_name}}
      #   register: is_exist
      #   become: true
     
      # - name: Copy War to server
      #   copy: src=/var/tmp/mobikwik_war/{{war_name}} dest=/var/install/{{install_dir}}/{{war_name}}
      #   when: is_exist.stat.exists == False
      #   become: true

      - name: Downlaod Mobikwik war
        copy: 
          dest: "{{ remote_path }}"
          src: "{{ work_dir }}{{ local_path }}{{war_name}}"
          force: yes
        when: is_exist.stat.exists == False
        become: yes

    
      - name: Tomcat PID
        shell: ps -ef | grep {{tomcat}} | grep XX:MaxPermSize | awk -F " " '{ print $2, $5 }'
        register: ps
        become: true

      - debug: 
          msg: " Tomcat PID {{ ps.stdout.split('\n')[0].split(' ')[0] }} before stop at time  {{ ps.stdout.split('\n')[0].split(' ')[1] }} "

      - name: Stop tomcat
        service: name={{tomcat}} state=stopped
        become: true

      - name: Remove Mobikwik Softlink
        command: rm {{soft_link}} chdir=/var/install/{{install_dir}}
        become: true
    
      - name: Deleting ROOT Directory.
        shell: 'rm -rf ROOT'
        args:
          chdir: /opt/{{tomcat}}/webapps
        become: true
  
      - name: Creating Softlink To New War
        command: ln -s {{war_name}} {{soft_link}} chdir=/var/install/{{install_dir}}
        become: true

      - name: Deleting Tomcat Work Data
        command: rm -rf Catalina chdir=/opt/{{tomcat}}/work
        become: true
    

      - name: Change OwnerShip To tomcat
        file : path=/var/install/{{install_dir}} state=directory recurse=yes owner=tomcat group=tomcat
        become: true

      - name: stat catalina out
        stat: path=/opt/{{tomcat}}/logs/catalina.out
        register: foo_stat
        become: true

      - name: Renaming catalina
        shell: mv /opt/{{tomcat}}/logs/catalina.out /opt/{{tomcat}}/logs/catalina.out.$(date +%F-%H-%M)
        become: true
        when: foo_stat.stat.exists

      - name: Start Tomcat
        service: name={{tomcat}} state=restarted
        become: true
     
      - name: Tomcat PID
        shell: ps -ef | grep {{tomcat}} | grep XX:MaxPermSize | awk -F " " '{ print $2, $5 }'
        register: ps
        become: true
      
      - debug: 
           msg: "Tomcat PID {{ ps.stdout.split('\n')[0].split(' ')[0] }} after war deployment at time  {{ ps.stdout.split('\n')[0].split(' ')[1] }}"

      - name: Changing Catalina Permisssion.
        shell: 'touch catalina.out && chmod 777 catalina.out && chown tomcat:tomcat catalina.out'
#        shell: 'chmod 777 catalina.out'
        args:
          chdir: /opt/{{tomcat}}/logs
        become: true

      - command: grep "Server startup in" /opt/{{tomcat}}/logs/catalina.out
        register: log_output
        until: log_output.stdout.find("Server startup in") > -1
        retries: 100
        delay: 13
        become: true

      - name: Tail Catalina logs
        command: tail -220 catalina.out
        args:
          chdir: /opt/{{tomcat}}/logs/
        register: taillogs
        become: true

      - debug: var=taillogs.stdout_lines

      - pause:
            seconds: 10

      - name: Hit the hosted url
        uri: url=http://{{target}}:{{port}}/{{hit_url}}
        #uri: url=http://{{ ansible_hostname }}:{{port}}/{{hit_url}}
        become: true

     # - name: Recording Deployment To New Relic
     #   uri: 
     #   when: app_id != ""
     #   become: true

